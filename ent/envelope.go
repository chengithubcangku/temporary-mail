// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tmail/ent/envelope"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Envelope is the model entity for the Envelope schema.
type Envelope struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Envelope) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case envelope.FieldID:
			values[i] = new(sql.NullInt64)
		case envelope.FieldTo, envelope.FieldFrom, envelope.FieldSubject, envelope.FieldContent:
			values[i] = new(sql.NullString)
		case envelope.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Envelope fields.
func (e *Envelope) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case envelope.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case envelope.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				e.To = value.String
			}
		case envelope.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				e.From = value.String
			}
		case envelope.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				e.Subject = value.String
			}
		case envelope.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				e.Content = value.String
			}
		case envelope.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Envelope.
// This includes values selected through modifiers, order, etc.
func (e *Envelope) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Envelope.
// Note that you need to call Envelope.Unwrap() before calling this method if this Envelope
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Envelope) Update() *EnvelopeUpdateOne {
	return NewEnvelopeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Envelope entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Envelope) Unwrap() *Envelope {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Envelope is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Envelope) String() string {
	var builder strings.Builder
	builder.WriteString("Envelope(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("to=")
	builder.WriteString(e.To)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(e.From)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(e.Subject)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(e.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Envelopes is a parsable slice of Envelope.
type Envelopes []*Envelope
