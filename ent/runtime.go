// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"tmail/ent/envelope"
	"tmail/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	envelopeFields := schema.Envelope{}.Fields()
	_ = envelopeFields
	// envelopeDescTo is the schema descriptor for to field.
	envelopeDescTo := envelopeFields[0].Descriptor()
	// envelope.ToValidator is a validator for the "to" field. It is called by the builders before save.
	envelope.ToValidator = envelopeDescTo.Validators[0].(func(string) error)
	// envelopeDescFrom is the schema descriptor for from field.
	envelopeDescFrom := envelopeFields[1].Descriptor()
	// envelope.FromValidator is a validator for the "from" field. It is called by the builders before save.
	envelope.FromValidator = envelopeDescFrom.Validators[0].(func(string) error)
	// envelopeDescSubject is the schema descriptor for subject field.
	envelopeDescSubject := envelopeFields[2].Descriptor()
	// envelope.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	envelope.SubjectValidator = envelopeDescSubject.Validators[0].(func(string) error)
	// envelopeDescContent is the schema descriptor for content field.
	envelopeDescContent := envelopeFields[3].Descriptor()
	// envelope.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	envelope.ContentValidator = envelopeDescContent.Validators[0].(func(string) error)
	// envelopeDescCreatedAt is the schema descriptor for created_at field.
	envelopeDescCreatedAt := envelopeFields[4].Descriptor()
	// envelope.DefaultCreatedAt holds the default value on creation for the created_at field.
	envelope.DefaultCreatedAt = envelopeDescCreatedAt.Default.(func() time.Time)
}
